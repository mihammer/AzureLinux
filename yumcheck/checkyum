#!/usr/bin/env bash
# Perform checks for yum on VMs using Microsoft Azure RHUI
#
VERSION="1.0.0"
SCRIPTNAME=`basename $0`
# Clean the environment
PATH="/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin"
test -n "${TERM}" || TERM="raw"
LANG="POSIX"
export PATH TERM LANG
# This script checks the following: 
# Checking if the vm is using the current RHUI
# Checking if the ssl cert dates are valid
# Checking for connectivity to rhui-1.microsoft.com over port 443 
# Checking for DNS Resolution

#######################################
# Header display to user
#######################################
function header() {
#Checking if the VM is running Red Hat
if [ $? -eq 0 ]; then
grep "Red" /etc/os-release &> /dev/null
  echo "Great, this is a Red Hat server"
  echo 
  cecho -c 'red' "Be sure to run this with sudo"
  echo
else echo "This operating system is no Red Hat. This script is intended for red hat yum issues"
        cecho -c 'red' "This is not a Red Hat server"
	exit
fi
  # Need confirmation from user to run
  cecho -c 'yellow' "!!THIS SCRIPT SHOULD ONLY BE USED IF INSTANCE HAS YUM REPOSITORY ISSUES!!"
  #read -p "Are you sure you want to continue? [y/n] " -n 1 -r
  echo
  #if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  #  cecho -c 'yellow' "Press [Y] or [y] next time to continue check"
	#safe_exit
  #fi
  cecho -c 'bold' "## YUM-REPOCHECK ##"
  cecho -c 'bold' "`date`"
}

#######################################
#Checking if the vm is using the current RHUI
#######################################
function current {
echo " "
cecho -c 'yellow' "Checking if using the current RHUI"
#check if /etc/yum.repos.d/rh-cloud.repo contains rhui-1-3. This would indicate it is using updated settings. 
grep "rhui-1.microsoft.com" /etc/yum.repos.d/rh-cloud.repo &> /dev/null 
#if the above doesn't find rhui-1, it returns a failure, thus it couldn't find it. Checking for all 3 servers. 
if [ $? -eq 0 ]; then
grep "rhui-2.microsoft.com" /etc/yum.repos.d/rh-cloud.repo &> /dev/null
  if [ $? -eq 0 ]; then
     grep "rhui-3.microsoft.com" /etc/yum.repos.d/rh-cloud.repo &> /dev/null
         if [ $? -eq 0 ]; then
cecho -c 'green' "Successful - /etc/yum.repos.d/rh-cloud.repo contains the 3 update servers."
   sleep 2
else
cecho -c 'red' "/etc/yum.repos.d/rh-cloud.repo is using outdated settings."
   cecho -c 'red' "https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/redhat/redhat-rhui#manual-update-procedure-to-use-the-azure-rhui-servers"
   safe_exit
   fi
fi
fi
}

#######################################
#Checking if the ssl cert dates are valid
# See https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/redhat/redhat-rhui#update-expired-rhui-client-certificate-on-a-vm
#######################################
function sslcert {
echo " " 
cecho -c 'yellow' "Checking if the ssl cert dates are valid"
#Assign the actual end date as a variable so it can be displayed later
enddate=$(openssl x509 -in /etc/pki/rhui/product/content.crt -noout -text|grep -E 'Not After')
#Check if the certificate expires in the next 60 seconds. If so, it's expired and needs refreshed. The following looks for "Certificate will expire", which will indicate it will expire.  
sudo openssl x509 -in /etc/pki/rhui/product/content.crt -noout -text -checkend 60 | grep "Certificate will expire" &> /dev/null
# Test if the above is not equal to 0. If 0, then it would indicate it has expired. 
if [ $? -ne 0 ]; then
  cecho -c 'green' "Successful - The certificate is not expired"
  cecho -c 'green' "Valid Cert dates"
  openssl x509 -in /etc/pki/rhui/product/content.crt -noout -text|grep -E 'Not After|Not Before'
   sleep 2
else
  cecho -c 'red' "The SSL cert has expired"
  cecho -c 'red' "Valid Cert dates"
  openssl x509 -in /etc/pki/rhui/product/content.crt -noout -text|grep -E 'Not After|Not Before'
  echo " "
   cecho -c 'red' "See the following to update it: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/redhat/redhat-rhui#manual-update-procedure-to-use-the-azure-rhui-servers"
   safe_exit
   fi
}

#######################################
#
# Checking for connectivity to rhui-1.microsoft.com over port 443 
#
#######################################
function connectivityrhui {
echo " " 
cecho -c 'yellow' "Checking for connectivity to https://rhui-1.microsoft.com over port 443" 
curl -v --connect-timeout 10 https://rhui-1.microsoft.com:443 &> /dev/null
if [ $? -eq 0 ]; then
   cecho -c 'green' "Successful - Server can connect to https://rhui-1.microsoft.com:443 "
   sleep 1
else
   echo -c 'red' "FAIL - Need to determine why the VM does not have access to the above address"
   echo -c 'red' "Potential reasons:"
   echo -c 'red' "- VM is behind a Standard Internal Load balancer. A Basic load balancer is required."
   echo -c 'red' "- A virtual network appliance could be blocking traffic. A UDR would be needed."
   echo -c 'red' "- If a proxy is being used, yum needs to be required to use this  /etc/yum.conf
proxy=http://<IP address>:<port number>"
   echo -c 'red' "- VM is behind a Standard Internal Load balancer"
        safe_exit
fi
}

#######################################
#
# Checking for DNS Resolution
#
#######################################
function checkdns {
echo " " 
cecho -c 'yellow' "Checking DNS Resolution to rhui-1.microsoft.com"
nslookup rhui-1.microsoft.com > /dev/null
if [ $? -eq 0 ]; then
   cecho -c 'green' "Successful - DNS is resolving rhui-1.microsoft.com as required"
   sleep 2
else
   cecho -c 'red' "FAIL - troubleshoot name resolution before continuing"
        safe_exit
fi
}

#######################################
# Exit safely
# Globals:
#   None
# Arguments:
#   None
#######################################
function safe_exit() {
  # Delete temp files, if any
  if [ -d "${tmp_dir}" ] ; then
    rm -r "${tmp_dir}"
  fi
  trap - INT TERM EXIT
  exit
}

#######################################
# The following function prints a text using custom color
# -c or --color define the color for the print. See the array colors for the available options.
# -n or --noline directs the system not to print a new line after the content.
# Last argument is the message to be printed.
#######################################
function cecho () {
 
    declare -A colors;
    colors=(\
        ['black']='\E[0;47m'\
        ['red']='\E[0;31m'\
        ['green']='\E[0;32m'\
        ['yellow']='\E[0;33m'\
        ['blue']='\E[0;34m'\
        ['magenta']='\E[0;35m'\
        ['cyan']='\E[0;36m'\
        ['white']='\E[0;37m'\
		['bold']='\E[0;1m'\

    );
 
    local defaultMSG="No message passed.";
    local defaultColor="black";
    local defaultNewLine=true;
 
    while [[ $# -gt 1 ]];
    do
    key="$1";
 
    case $key in
        -c|--color)
            color="$2";
            shift;
        ;;
        -n|--noline)
            newLine=false;
        ;;
        *)
            # unknown option
        ;;
    esac
    shift;
    done
 
    message=${1:-$defaultMSG};   # Defaults to default message.
    color=${color:-$defaultColor};   # Defaults to default color, if not specified.
    newLine=${newLine:-$defaultNewLine};
 
    echo -en "${colors[$color]}";
    echo -en "$message" | tee -a /var/log/sc-repocheck;
    echo >> /var/log/sc-repocheck;
    if [ "$newLine" = true ] ; then
        echo;
    fi
    tput sgr0; #  Reset text attributes to normal without clearing screen.
 
    return;
}

#######################################
# Run through all checks
# Globals:
#   None
# Arguments:
#   None
#######################################
function main_script() {
  clear
  header
  current
  sslcert
  checkdns
  connectivityrhui
  #framework
  #os
  #check_metadata
  #check_http
  #check_https
  #check_region_servers
  #check_hosts
  #check_baseproduct
  #check_regionclient_version
  #report
}

############## End of Options ###################

# Trap bad exits
trap trap_cleanup EXIT INT TERM

# Run all checks
main_script
# Safely exit script
safe_exit
